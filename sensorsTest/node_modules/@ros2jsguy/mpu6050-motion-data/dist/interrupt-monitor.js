"use strict";
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterruptMonitor = void 0;
const EventEmitter = require("events");
const onoff_1 = require("onoff"); // eslint-disable-line
/**
 * Monitor a GPIO pin and emit a 'data' event with the pin
 * transitions to its active state. HIGH is the default
 * active state on the pin. If na error occurs emit an
 * 'error' event with an Error parameter.
 */
class InterruptMonitor extends EventEmitter {
    /**
     * Create a new instance monitoring a GPIO pin.
     * @param gpioPin - the pin to monitor
     * @param [activeHigh=true] - true sets the pin active state to HIGH; otherwise the active state is LOW.
     */
    constructor(gpioPin, activeHigh = true) {
        super();
        if (gpioPin < 0 || gpioPin > 40) {
            throw new Error(`Invalid gpio ${gpioPin}`);
        }
        if (!onoff_1.Gpio.accessible) {
            throw new Error(`gpio ${gpioPin} is not accessible`);
        }
        const edge = activeHigh ? 'rising' : 'falling';
        this.pin = new onoff_1.Gpio(gpioPin, 'in', edge);
    }
    /**
     * Begin monitoring the pin and emitting 'data' event when the pin is in the active state.
     */
    start() {
        this.pin.watch((error, edge) => {
            if (error) {
                this.emit('error', error);
            }
            else {
                this.emit('data');
            }
        });
    }
    /**
     * Stop monitoring the pin and discontinue emitting 'data' events.
     */
    stop() {
        this.pin.unwatch();
    }
    /**
     * Stop monitoring the pin and release it.
     */
    shutdown() {
        this.stop();
        this.pin.unexport();
    }
}
exports.InterruptMonitor = InterruptMonitor;
/* eslint-enable */ 
//# sourceMappingURL=interrupt-monitor.js.map