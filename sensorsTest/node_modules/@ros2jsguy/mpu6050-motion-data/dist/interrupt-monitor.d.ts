/// <reference types="node" />
import EventEmitter = require("events");
/**
 * Monitor a GPIO pin and emit a 'data' event with the pin
 * transitions to its active state. HIGH is the default
 * active state on the pin. If na error occurs emit an
 * 'error' event with an Error parameter.
 */
export declare class InterruptMonitor extends EventEmitter {
    private pin;
    /**
     * Create a new instance monitoring a GPIO pin.
     * @param gpioPin - the pin to monitor
     * @param [activeHigh=true] - true sets the pin active state to HIGH; otherwise the active state is LOW.
     */
    constructor(gpioPin: number, activeHigh?: boolean);
    /**
     * Begin monitoring the pin and emitting 'data' event when the pin is in the active state.
     */
    start(): void;
    /**
     * Stop monitoring the pin and discontinue emitting 'data' events.
     */
    stop(): void;
    /**
     * Stop monitoring the pin and release it.
     */
    shutdown(): void;
}
//# sourceMappingURL=interrupt-monitor.d.ts.map