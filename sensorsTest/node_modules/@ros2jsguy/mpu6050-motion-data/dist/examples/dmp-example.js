"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const perf_hooks_1 = require("perf_hooks");
const mpu6050_1 = require("../mpu6050");
const utils_1 = require("../utils");
const interrupt_monitor_1 = require("../interrupt-monitor");
const GPIO_MPU6050_DATA_PIN = 18;
function main() {
    let start = 0;
    let interrupts = 0;
    const imu = new mpu6050_1.MPU6050();
    imu.initialize();
    console.log('MPU6050 Device');
    console.log('       connected: ', imu.testConnection());
    console.log('              id: ', imu.getDeviceID());
    console.log('      clock rate: ', imu.getRate());
    console.log('  temperature(F): ', utils_1.Utils.celciusToF(imu.getTemperature()).toFixed(2));
    utils_1.Utils.msleep(500);
    console.log('\nDMP initialize and calibrate...');
    imu.dmpInitialize();
    imu.calibrateAccel();
    imu.calibrateGyro();
    imu.printActiveOffsets();
    imu.setInterruptLatchEnabled(true);
    imu.setInterruptDMPEnabled(true);
    const interruptMonitor = new interrupt_monitor_1.InterruptMonitor(GPIO_MPU6050_DATA_PIN);
    interruptMonitor.on('data', () => {
        if (start === 0)
            start = perf_hooks_1.performance.now();
        const buf = imu.dmpGetCurrentFIFOPacket();
        if (buf) {
            const data = imu.dmpGetMotionData(buf);
            // console.log(data);
        }
        interrupts++;
        if (interrupts === 1)
            console.log('  Receiving interrupt(s)');
    });
    interruptMonitor.on('error', (error) => {
        console.log('Data error:', error.message);
    });
    interruptMonitor.start();
    setTimeout(() => {
        imu.shutdown();
        interruptMonitor.shutdown();
        const stop = perf_hooks_1.performance.now();
        const avg = (interrupts / (stop - start) * 1000).toFixed(2);
        console.log('\nPerformance');
        console.log('  interrupts: ', interrupts);
        console.log('      millis: ', (stop - start).toFixed(2));
        console.log('    avg (hz): ', avg);
        process.exit(0);
    }, 10000);
    console.log('\nSampling data for 10 seconds');
    imu.setDMPEnabled(true);
    console.log('  Waiting for interrupts');
}
main();
//# sourceMappingURL=dmp-example.js.map